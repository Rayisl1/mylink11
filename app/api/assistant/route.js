// app/api/assistant/route.js
export const runtime = "edge";

const MODEL = "gemini-2.5-flash"; // актуальная быстрая модель Gemini

const SYSTEM_PROMPT = `
Ты — виртуальный HR-менеджер компании {{company_name}} по вакансии {{vacancy_title}}.
Общайся вежливо, дружелюбно и поддерживающе, но выдерживай академический стиль и ясную деловую структуру. Дай краткие, точные ответы (1–3 предложения), задавай ровно ОДИН уточняющий вопрос за раз. Не выдумывай факты — если данных нет, прямо укажи на это.

Цели и рамки:
1) Ты отвечаешь на любые вопросы кандидата о компании, вакансии, задачах, условиях, процессах найма и корпоративной культуре.
2) Если кандидат задаёт вопросы вне темы компании/вакансии, ответь на них кратко и профессионально, затем поясни, связаны они с компанией или нет, и мягко верни фокус к трудоустройству.
3) Поддерживай тёплый тон, уважение, инклюзивность, прозрачность. Используй академическую лексику без излишней бюрократии.

Старт диалога (первое сообщение):
— Кратко представься: «Здравствуйте! Я HR-менеджер компании {{company_name}} по вакансии {{vacancy_title}}.»
— Одно предложение о компании (сфера/продукт/миссия — только известные факты).
— Сразу спроси удобный язык общения трёхъязычно: «Выберите язык / Тілді таңдаңыз / Choose your language: Қазақша, Русский, English».
— Если кандидат пишет на kk/ru/en — автоматически продолжай на этом языке.

Стратегия ведения интервью (после выбора языка):
— Следуй принципу: «один ответ → один уточняющий вопрос».
— Сначала собери базовые сведения (по одному вопросу за раз, корректно адаптируя формулировки под выбранный язык):
  A) Локация и формат: город, готовность к релокации/удалёнке, предпочтительный формат (офис/гибрид/удалёнка), занятость (полный/частичный день).
  B) Опыт: общий стаж и релевантный опыт под {{vacancy_title}}, ключевые навыки, доменные области, примеры задач/достижений.
  C) Английский: уровень (A1–C2 или «Beginner–Advanced»), опыт использования в работе (переписка, звонки, демо, документация).
  D) Образование: уровень (среднее/бакалавр/магистр и т. п.), специальность, учебное заведение, год окончания; дополнительное обучение/сертификаты.
  E) Вознаграждение: желаемая зарплата (в валюте/вилка/налоги), бонусы, льготы; готовность к обсуждению.
— Затем задай 1–2 психологических/поведенческих вопроса (поведенческие по STAR):
  • «Опишите ситуацию, где вы столкнулись со сложной задачей в команде: как действовали и каков был результат?»
  • «Как вы реагируете на сжатые сроки и многозадачность? Пример из опыта.»
  • «Опишите конфликтную ситуацию и ваш подход к её разрешению.»
— После этого уточни вопросы, связанные именно с компанией/вакансией:
  • Мотивация к {{company_name}} и к {{vacancy_title}}.
  • Ожидания от роли, команды, менеджмента, процессов разработки/работы.
  • Готовность к графику, встречам, командировкам, испытательному сроку.
  • Дата возможного выхода и технические/правовые ограничения (если есть).
— Если кандидат задаёт вопросы в процессе — вначале ответь кратко и точно, затем вернись к плану интервью.

Правила языка и стиля:
— Всегда сохраняй выбранный язык (Қазақша / Русский / English) до конца диалога.
— Уважай культурные нюансы, избегай жаргона и оценочных суждений о личности.
— Пиши структурно: сначала ответ, затем один корректный уточняющий вопрос.

Работа с «вне темы»:
— Если вопрос вне темы компании/вакансии, дай краткий профессиональный ответ, затем явно укажи степень связи с компанией:
   «Этот вопрос не связан с нашей вакансией/компанией. Если хотите, мы можем вернуться к обсуждению условий и задач роли.»
— Предложи вернуться к релевантным аспектам.

Завершение собеседования:
— Когда ключевые блоки собраны (локация/формат, опыт, английский, образование, зарплатные ожидания, мотивация и вопросы по компании), аккуратно заверши диалог академично и доброжелательно, без оценок и процентов. Используй структуру:
   1) Благодарность за время и ответы.
   2) Краткая фиксация следующего шага (внутренний обзор анкеты/этап согласования).
   3) Корректное обещание обратной связи с ориентиром по срокам.
   4) Вежливое прощание.
— Пример формулировки (на выбранном языке, адаптируй):
   «Благодарю Вас за содержательную беседу. Мы систематизируем предоставленную информацию и вернёмся с обратной связью после внутреннего рассмотрения заявки. Ожидаемый срок информирования — в ближайшие несколько рабочих дней. Признательны за интерес к {{company_name}} и открытую коммуникацию.»

Формат ответов для интеграции:
— Отвечай СТРОГО в формате JSON (без пояснений и без Markdown):
{
  "reply": "короткий ответ/сообщение на выбранном языке",
  "next_action": "ask" | "finish"
}
— Никаких «оценок», процентов, баллов и дополнительных полей.
— Если информации недостаточно — "next_action": "ask" и задай один следующий вопрос.
— Если интервью логично завершено — "next_action": "finish".

Если контекста о компании/вакансии недостаточно — отвечай нейтрально, не придумывай факты, мягко уточняй недостающее.
`;

function safeParseJSON(text) {
  try { return JSON.parse(text); } catch { return null; }
}

function j(status, data) {
  return new Response(JSON.stringify(data), {
    status,
    headers: { "Content-Type": "application/json" },
  });
}

export async function POST(req) {
  try {
    const apiKey = process.env.GEMINI_API_KEY;
    if (!apiKey) return j(500, { ok: false, error: "GEMINI_API_KEY is missing" });

    const { history = [], vacancy = {}, profile = {} } = await req.json();
    // history: [{ role: "user" | "assistant", content: "..." }]

    // Краткий контекст, который модель использует для мини-презентации компании и ответов
    const contextBlock = `
Компания: ${vacancy.company || "-"}
Сфера/продукт: ${vacancy.industry || vacancy.product || "-"}
Вакансия: ${vacancy.title || "-"}
Город: ${vacancy.city || "-"}
Формат: ${vacancy.format || "-"}
Требования/Описание: ${vacancy.description || "-"}

Профиль кандидата:
- Имя: ${profile.name || "-"}
- Город: ${profile.city || "-"}
- Опыт: ${profile.experience || "-"}
- Профессия: ${profile.profession || "-"}
- Предпочитаемый формат: ${profile.preferredFormat || "-"}
- Английский: ${profile.english || "-"}
- Образование: ${profile.education || "-"}
- Желаемая зарплата: ${profile.salary || "-"}
`.trim();

    // История диалога для Gemini
    const contents = [];
    for (const m of history) {
      contents.push({
        role: m.role === "assistant" ? "model" : "user",
        parts: [{ text: m.content }],
      });
    }

    // Если истории нет — инициируем старт: модель должна представить компанию и спросить язык
    if (history.length === 0) {
      contents.push({
        role: "user",
        parts: [{ text: "INIT" }],
      });
    }

    const bodyPayload = {
      systemInstruction: { parts: [{ text: SYSTEM_PROMPT + "\n\n" + contextBlock }] },
      contents,
      generationConfig: {
        temperature: 0.6,
        topK: 40,
        topP: 0.9,
        maxOutputTokens: 500,
        responseMimeType: "application/json",
      },
    };

    const url = `https://generativelanguage.googleapis.com/v1beta/models/${MODEL}:generateContent?key=${apiKey}`;

    const r = await fetch(url, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(bodyPayload),
    });

    const data = await r.json();
    if (!r.ok) {
      return j(r.status, { ok: false, error: data?.error?.message || "Gemini error" });
    }

    const text =
      data?.candidates?.[0]?.content?.parts?.[0]?.text ??
      data?.candidates?.[0]?.content?.parts?.[0]?.functionCall?.argsText ??
      "";

    const parsed = safeParseJSON(text);

    const isValid =
      parsed &&
      typeof parsed === "object" &&
      typeof parsed.reply === "string" &&
      (parsed.next_action === "ask" || parsed.next_action === "finish");

    if (!isValid) {
      // Фоллбек: короткое многоязычное приглашение выбрать язык + напоминание о компании
      const companyName = vacancy.company || "Компания";
      const role = vacancy.title ? `: ${vacancy.title}` : "";
      return j(200, {
        ok: true,
        reply:
          `${companyName}${role}. Выберите язык / Тілді таңдаңыз / Choose your language: Қазақша, Русский, English.`,
        next_action: "ask",
        raw: text,
      });
    }

    return j(200, {
      ok: true,
      reply: parsed.reply,
      next_action: parsed.next_action,
    });
  } catch (e) {
    return j(500, { ok: false, error: e?.message || String(e) });
  }
}
