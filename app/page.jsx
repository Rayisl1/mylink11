"use client";
import { useEffect, useMemo, useRef, useState } from "react";

/* ========= –î–ê–ù–ù–´–ï –î–õ–Ø –ö–ê–†–¢–û–ß–ï–ö ========= */
const JOBS = [
  { id: 1, title: "–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º", city: "–ê–ª–º–∞—Ç—ã", exp: "–æ—Ç 2 –ª–µ—Ç", format: "–ü–æ–ª–Ω—ã–π –¥–µ–Ω—å", salary: "–æ—Ç 300 000 ‚Ç∏" },
  { id: 2, title: "–ú–∞—Ä–∫–µ—Ç–æ–ª–æ–≥ Performance", city: "–ê—Å—Ç–∞–Ω–∞", exp: "–æ—Ç 3 –ª–µ—Ç", format: "–ì–∏–±—Ä–∏–¥", salary: "–æ—Ç 600 000 ‚Ç∏" },
  { id: 3, title: "UI/UX –î–∏–∑–∞–π–Ω–µ—Ä", city: "–®—ã–º–∫–µ–Ω—Ç", exp: "–æ—Ç 2 –ª–µ—Ç", format: "–ì–∏–±—Ä–∏–¥", salary: "" },
  { id: 4, title: "Backend Developer (Node.js)", city: "–ê–ª–º–∞—Ç—ã", exp: "Middle+", format: "Full Remote", salary: "" },
  { id: 5, title: "Product Manager", city: "–ê—Å—Ç–∞–Ω–∞", exp: "Senior", format: "–û—Ñ–∏—Å", salary: "" }
];

/* ========= –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–û–ï ========= */
const clsx = (...xs) => xs.filter(Boolean).join(" ");
const esc = (s) =>
  String(s ?? "").replace(/[&<>"']/g, (m) => ({ "&": "&amp;", "<": "&lt;", ">": "&gt;", '"': "&quot;", "'": "&#39;" }[m]));

/* ========= SMARTBOT –ú–û–î–ê–õ ========= */
function SmartBotModal({ open, onClose, job }) {
  const [step, setStep] = useState(0);
  const [candidate, setCandidate] = useState({ name: "", city: "", exp: "", format: "" });
  const [messages, setMessages] = useState([]);
  const inputRef = useRef(null);
  const listRef = useRef(null);

  const push = (sender, html) => {
    setMessages((arr) => [...arr, { sender, html }]);
  };

  const setQuick = (labels) =>
    labels.map((label) => (
      <button
        key={label}
        className="sb-quick-btn"
        onClick={() => handleUser(label)}
        type="button"
      >
        {label}
      </button>
    ));

  const normalize = (v) => {
    const t = (v || "").toLowerCase().trim();
    if (["–¥–∞", "y", "yes", "–∞–≥–∞", "—É–≥—É", "–æ–∫", "+"].includes(t)) return "–¥–∞";
    if (["–Ω–µ—Ç", "n", "no", "-", "–Ω–µ–∞"].includes(t)) return "–Ω–µ—Ç";
    return t;
  };

  const ask = () => {
    if (step === 0) push("bot", `–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ç–µ—Ä–µ—Å –∫ –≤–∞–∫–∞–Ω—Å–∏–∏ ¬´${esc(job.title)}¬ª. –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?`);
    if (step === 1) push("bot", `–í—ã —Å–µ–π—á–∞—Å –≤ –≥–æ—Ä–æ–¥–µ ${esc(job.city)}?`);
    if (step === 2) push("bot", `–ï—Å—Ç—å –º–∏–Ω–∏–º—É–º ${esc(job.exp)}?`);
    if (step === 3) push("bot", `–§–æ—Ä–º–∞—Ç ${esc(job.format)}. –ü–æ–¥—Ö–æ–¥–∏—Ç?`);
    if (step === 4) {
      push("bot", "–°–ø–∞—Å–∏–±–æ! –û—Ü–µ–Ω–∏–≤–∞—é –≤–∞—à—É —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å‚Ä¶");
      finish();
    }
  };

  const finish = () => {
    let score = 100;
    if (candidate.city !== "–¥–∞") score -= 30;
    if (candidate.exp !== "–¥–∞") score -= 40;
    if (candidate.format !== "–¥–∞") score -= 30;
    if (score < 0) score = 0;

    const tone = score >= 80 ? "good" : score >= 60 ? "warn" : "bad";
    push("bot", `–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: <span class="score ${tone}">${score}%</span>`);
    push("bot", "–ú–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ –≤–∞–∫–∞–Ω—Å–∏–∏ (–¥–µ–º–æ-—Ä–µ–∂–∏–º –±–µ–∑ —Å–µ—Ä–≤–µ—Ä–∞).");

    const all = JSON.parse(localStorage.getItem("smartbot_candidates") || "[]");
    all.push({
      name: candidate.name || "–ö–∞–Ω–¥–∏–¥–∞—Ç",
      city: candidate.city,
      exp: candidate.exp,
      format: candidate.format,
      score,
      jobId: job.id,
      jobTitle: job.title,
      date: new Date().toISOString()
    });
    localStorage.setItem("smartbot_candidates", JSON.stringify(all));

    setStep(999); // —Å–≤–æ–±–æ–¥–Ω—ã–π —Ä–µ–∂–∏–º
  };

  const handleUser = (text) => {
    const v = (text || "").trim();
    if (!v) return;
    push("user", esc(v));

    if (step === 0) {
      setCandidate((c) => ({ ...c, name: v }));
      setStep(1);
      return;
    }
    if (step === 1) {
      setCandidate((c) => ({ ...c, city: normalize(v) }));
      setStep(2);
      return;
    }
    if (step === 2) {
      setCandidate((c) => ({ ...c, exp: normalize(v) }));
      setStep(3);
      return;
    }
    if (step === 3) {
      setCandidate((c) => ({ ...c, format: normalize(v) }));
      setStep(4);
      return;
    }

    // –æ—Ñ—Ñ–ª–∞–π–Ω-–æ—Ç–≤–µ—Ç—ã –≤ –¥–µ–º–æ (–±–µ–∑ —Å–µ—Ä–≤–µ—Ä–∞)
    const canned = [
      "–ü—Ä–∏–Ω—è—Ç–æ! –ü–µ—Ä–µ–¥–∞–º —Ä–µ–∫—Ä—É—Ç–µ—Ä—É.",
      "–ì–æ—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –ª—é–±—ã–µ —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã.",
      "–ì—Ä–∞—Ñ–∏–∫: –±—É–¥–Ω–∏, —Å 10:00 –¥–æ 19:00; –∏—Å–ø—ã—Ç–∞—Ç–µ–ª—å–Ω—ã–π —Å—Ä–æ–∫ 2 –º–µ—Å—è—Ü–∞.",
      "–ü–ª–∞–Ω –ø—Ä–æ–¥–∞–∂ –∏ CRM ‚Äî –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–º –ø—Ä–∏ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–µ."
    ];
    push("bot", canned[Math.floor(Math.random() * canned.length)]);
  };

  useEffect(() => {
    if (!open) return;
    setStep(0);
    setCandidate({ name: "", city: "", exp: "", format: "" });
    setMessages([]);
  }, [open, job?.id]);

  useEffect(() => {
    if (!open) return;
    ask();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [step, open]);

  useEffect(() => {
    listRef.current?.scrollTo({ top: listRef.current.scrollHeight, behavior: "smooth" });
  }, [messages]);

  if (!open) return null;

  return (
    <div className="sb-backdrop" role="dialog" aria-modal="true" aria-labelledby="sb-title">
      <div className="sb-modal">
        <div className="sb-head">
          <div className="sb-title" id="sb-title">ü§ñ SmartBot ‚Äî –±—ã—Å—Ç—Ä—ã–π —Å–∫—Ä–∏–Ω–∏–Ω–≥</div>
          <button className="sb-close" aria-label="–ó–∞–∫—Ä—ã—Ç—å" onClick={onClose}>√ó</button>
        </div>
        <div className="sb-body">
          <div className="sb-messages" ref={listRef}>
            {messages.map((m, i) => (
              <div
                key={i}
                className={clsx(m.sender === "bot" ? "sb-bot" : "sb-user")}
                dangerouslySetInnerHTML={{ __html: `<b>${m.sender === "bot" ? "SmartBot" : "–í—ã"}:</b> ${m.html}` }}
              />
            ))}
          </div>
          <div className="sb-input">
            <input
              ref={inputRef}
              type="text"
              placeholder="–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç..."
              onKeyDown={(e) => {
                if (e.key === "Enter") {
                  const v = e.currentTarget.value;
                  e.currentTarget.value = "";
                  handleUser(v);
                }
              }}
            />
            <button
              onClick={() => {
                const el = inputRef.current;
                const v = el?.value?.trim();
                if (!v) return;
                el.value = "";
                handleUser(v);
              }}
            >
              –û—Ç–ø—Ä–∞–≤–∏—Ç—å
            </button>
          </div>

          {/* –ë—ã—Å—Ç—Ä—ã–µ –∫–Ω–æ–ø–∫–∏ (—Ä–µ–Ω–¥–µ—Ä—è—Ç—Å—è –≤ ask()) */}
          <div className="sb-quick">
            {[1, 2, 3].includes(step) ? setQuick(["–î–∞", "–ù–µ—Ç"]) : null}
          </div>
        </div>
      </div>

      {/* –°—Ç–∏–ª–∏ –º–æ–¥–∞–ª–∫–∏ –ª–æ–∫–∞–ª—å–Ω–æ */}
      <style jsx global>{`
        .sb-backdrop{position:fixed;inset:0;background:var(--overlay);display:flex;align-items:center;justify-content:center;z-index:50}
        .sb-modal{width:min(720px,94vw);background:var(--card);border-radius:16px;border:1px solid var(--line);box-shadow:0 20px 60px rgba(2,8,23,.25);overflow:hidden}
        .sb-head{display:flex;align-items:center;justify-content:space-between;padding:12px 16px;background:#f8fafc;border-bottom:1px solid var(--line)}
        [data-theme="dark"] .sb-head{background:#0b1424}
        .sb-title{font-weight:600}
        .sb-close{border:none;background:transparent;font-size:20px;line-height:1;cursor:pointer;color:#94a3b8}
        .sb-body{padding:12px 16px}
        .sb-messages{height:360px;overflow:auto;display:flex;flex-direction:column;gap:10px;padding-right:4px}
        .sb-bot,.sb-user{max-width:78%;padding:10px 12px;border-radius:14px;font-size:14px;line-height:1.4}
        .sb-bot{background:#f1f5f9;align-self:flex-start}[data-theme="dark"] .sb-bot{background:#122033}
        .sb-user{background:#dbeafe;align-self:flex-end}[data-theme="dark"] .sb-user{background:#1d3a6a}
        .sb-input{display:flex;gap:8px;margin-top:12px}
        .sb-input input{flex:1;padding:10px 12px;border:1px solid var(--line);border-radius:12px;font-size:14px;background:transparent;color:var(--text)}
        .sb-input button{padding:10px 12px;border-radius:12px;border:none;background:var(--brand);color:#fff;font-weight:600;cursor:pointer}
        .sb-quick{display:flex;gap:8px;margin-top:8px;flex-wrap:wrap}
        .sb-quick-btn{padding:6px 10px;border:1px solid var(--line);background:transparent;border-radius:999px;cursor:pointer;font-size:13px;color:var(--text)}
        .score{display:inline-block;padding:6px 10px;border-radius:999px;font-size:12px;font-weight:600}
        .score.good{background:var(--good-bg);color:var(--good-t);border:1px solid var(--good-br)}
        .score.warn{background:var(--warn-bg);color:var(--warn-t);border:1px solid var(--warn-br)}
        .score.bad{background:var(--bad-bg);color:var(--bad-t);border:1px solid var(--bad-br)}
      `}</style>
    </div>
  );
}

/* ========= –¢–ê–ë–õ–ò–¶–ê –†–ê–ë–û–¢–û–î–ê–¢–ï–õ–Ø ========= */
function EmployerTable() {
  const [rows, setRows] = useState([]);

  const load = () => {
    const data = JSON.parse(localStorage.getItem("smartbot_candidates") || "[]").slice().reverse();
    setRows(data);
  };

  useEffect(() => {
    load();
  }, []);

  const exportCSV = () => {
    if (!rows.length) {
      alert("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞");
      return;
    }
    const headers = ["name", "city", "exp", "format", "score", "jobId", "jobTitle", "date"];
    const lines = [headers.join(",")];
    rows.forEach((o) => {
      const row = headers
        .map((k) => `"${(o[k] ?? "").toString().replace(/"/g, '""')}"`)
        .join(",");
      lines.push(row);
    });
    const csv = lines.join("\n");
    const blob = new Blob([csv], { type: "text/csv;charset=utf-8;" });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    const ts = new Date().toISOString().slice(0, 19).replace(/[:T]/g, "-");
    a.href = url;
    a.download = `smartbot_candidates_${ts}.csv`;
    document.body.appendChild(a);
    a.click();
    a.remove();
    setTimeout(() => URL.revokeObjectURL(url), 1000);
  };

  const clearAll = () => {
    if (!confirm("–£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –æ—Ç–∫–ª–∏–∫–∏?")) return;
    localStorage.removeItem("smartbot_candidates");
    load();
  };

  const tone = (score) => (score >= 80 ? "b-good" : score >= 60 ? "b-warn" : "b-bad");

  return (
    <div className="card">
      <div className="toolbar">
        <button className="btn btn-outline" onClick={exportCSV}>–≠–∫—Å–ø–æ—Ä—Ç CSV</button>
        <button className="btn btn-outline" onClick={load}>–û–±–Ω–æ–≤–∏—Ç—å</button>
        <button className="btn btn-outline" onClick={clearAll}>–û—á–∏—Å—Ç–∏—Ç—å</button>
      </div>

      <div style={{ overflow: "auto" }}>
        <table className="table">
          <thead>
            <tr>
              <th>–ò–º—è</th>
              <th>–í–∞–∫–∞–Ω—Å–∏—è</th>
              <th>–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å</th>
              <th>–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä</th>
              <th>–û—Ç–≤–µ—Ç—ã</th>
              <th>–î–∞—Ç–∞</th>
            </tr>
          </thead>
          <tbody>
            {!rows.length && (
              <tr>
                <td colSpan={6} style={{ textAlign: "center", color: "var(--muted)", padding: 18 }}>
                  –ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–π–¥–∏—Ç–µ —Å–∫—Ä–∏–Ω–∏–Ω–≥ —á–µ—Ä–µ–∑ ¬´–û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è¬ª.
                </td>
              </tr>
            )}
            {rows.map((r, i) => (
              <tr key={i}>
                <td>{esc(r.name)}</td>
                <td>{esc(r.jobTitle || "")}</td>
                <td>
                  <span className={clsx("badge", tone(Number(r.score) || 0))}>
                    {Number(r.score) || 0}%
                  </span>
                </td>
                <td>
                  <div style={{ height: 8, background: "var(--line)", borderRadius: 999, overflow: "hidden", width: 140 }}>
                    <div
                      style={{
                        height: 8,
                        width: `${Math.max(0, Math.min(100, Number(r.score) || 0))}%`,
                        background: "#60a5fa"
                      }}
                    />
                  </div>
                </td>
                <td style={{ color: "var(--muted)", fontSize: 13 }}>
                  –≥–æ—Ä–æ–¥: {esc(r.city || "-")}; –æ–ø—ã—Ç: {esc(r.exp || "-")}; —Ñ–æ—Ä–º–∞—Ç: {esc(r.format || "-")}
                </td>
                <td style={{ fontSize: 12, color: "var(--muted)" }}>
                  {new Date(r.date).toLocaleString()}
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  );
}

/* ========= –ì–õ–ê–í–ù–ê–Ø –°–¢–†–ê–ù–ò–¶–ê ========= */
export default function Page() {
  const [theme, setTheme] = useState("light");
  const [view, setView] = useState("jobs");
  const [modalOpen, setModalOpen] = useState(false);
  const [job, setJob] = useState(JOBS[0]);

  useEffect(() => {
    const saved = localStorage.getItem("theme") || "light";
    setTheme(saved);
    document.body.setAttribute("data-theme", saved);
  }, []);

  const switchTheme = () => {
    const next = theme === "dark" ? "light" : "dark";
    setTheme(next);
    document.body.setAttribute("data-theme", next);
    localStorage.setItem("theme", next);
  };

  const openSmartBot = (j) => {
    setJob(j);
    setModalOpen(true);
  };

  return (
    <>
      {/* Header */}
      <div className="header">
        <div className="header-inner">
          <div className="logo">JobBoard</div>
          <div className="nav">
            <button
              className={clsx(view === "jobs" && "active")}
              onClick={() => setView("jobs")}
            >
              –í–∞–∫–∞–Ω—Å–∏–∏
            </button>
            <button
              className={clsx(view === "employer" && "active")}
              onClick={() => setView("employer")}
            >
              –†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å
            </button>
            <button onClick={switchTheme} title="–°–≤–µ—Ç–ª–∞—è/—Ç—ë–º–Ω–∞—è —Ç–µ–º–∞">–¢–µ–º–∞</button>
          </div>
        </div>
      </div>

      <div className="container">
        {/* Hero */}
        <section className="hero">
          <div>
            <h1>–ù–∞–π–¥–∏—Ç–µ —Ä–∞–±–æ—Ç—É –º–µ—á—Ç—ã</h1>
            <p>–õ–∞–∫–æ–Ω–∏—á–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å, –±—ã—Å—Ç—Ä—ã–π –æ—Ç–∫–ª–∏–∫ –∏ —É–º–Ω—ã–π —Å–∫—Ä–∏–Ω–∏–Ω–≥ —á–µ—Ä–µ–∑ SmartBot.</p>
          </div>
          <div className="pill">–î–µ–º–æ-–≤–µ—Ä—Å–∏—è (—Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ only)</div>
        </section>

        {/* –í–ê–ö–ê–ù–°–ò–ò */}
        {view === "jobs" && (
          <section>
            <div className="grid">
              {JOBS.slice(0, 2).map((j) => (
                <article className="card col-6" key={j.id}>
                  <h3 className="title">{j.title}</h3>
                  <div className="meta">
                    <span className="pill">{j.city}</span>
                    <span className="pill">{j.exp}</span>
                    <span className="pill">{j.format}</span>
                    {j.salary && <span className="pill">{j.salary}</span>}
                  </div>
                  <div className="row">
                    <div><strong>–û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏:</strong> —Ä–∞–±–æ—Ç–∞ —Å –ª–∏–¥–∞–º–∏, –∑–≤–æ–Ω–∫–∏, CRM</div>
                    <div><strong>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:</strong> —É–≤–µ—Ä–µ–Ω–Ω–∞—è —Ä–µ—á—å, –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞</div>
                  </div>
                  <div className="actions">
                    <button className="btn btn-primary" onClick={() => openSmartBot(j)}>–û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è</button>
                    <button className="btn btn-outline" onClick={() => openSmartBot(j)}>–ë—ã—Å—Ç—Ä—ã–π –æ—Ç–∫–ª–∏–∫</button>
                  </div>
                </article>
              ))}

              {JOBS.slice(2).map((j) => (
                <article className="card col-4" key={j.id}>
                  <h3 className="title">{j.title}</h3>
                  <div className="meta">
                    <span className="pill">{j.city}</span>
                    <span className="pill">{j.exp}</span>
                    <span className="pill">{j.format}</span>
                  </div>
                  <div className="actions">
                    <button className="btn btn-primary" onClick={() => openSmartBot(j)}>–û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è</button>
                  </div>
                </article>
              ))}
            </div>
          </section>
        )}

        {/* –†–ê–ë–û–¢–û–î–ê–¢–ï–õ–¨ */}
        {view === "employer" && (
          <section>
            <div className="card" style={{ marginBottom: 16 }}>
              <h3 className="title" style={{ marginBottom: 8 }}>–û—Ç–∫–ª–∏–∫–∏ SmartBot</h3>
              <p className="muted" style={{ color: "var(--muted)", margin: 0 }}>
                –ó–¥–µ—Å—å –ø–æ—è–≤–ª—è—é—Ç—Å—è –∫–∞–Ω–¥–∏–¥–∞—Ç—ã –ø–æ—Å–ª–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Å–∫—Ä–∏–Ω–∏–Ω–≥–∞ –≤ –≤–∏–¥–∂–µ—Ç–µ.
              </p>
            </div>
            <EmployerTable />
          </section>
        )}

        <p className="foot">¬© 2025 JobBoard Demo. –î–∞–Ω–Ω—ã–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä –∏ –æ—Å—Ç–∞—é—Ç—Å—è –≤ –≤–∞—à–µ–º –±—Ä–∞—É–∑–µ—Ä–µ.</p>
      </div>

      {/* SmartBot modal */}
      <SmartBotModal open={modalOpen} job={job} onClose={() => setModalOpen(false)} />

      {/* –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã */}
      <style jsx global>{`
        :root{
          --bg:#f6f8fb; --card:#fff; --text:#0f172a; --muted:#64748b; --brand:#2563eb; --brand-600:#1e4ed8; --line:#e2e8f0; --pill:#eff6ff;
          --chip-blue:#1e3a8a; --shadow:0 4px 16px rgba(2,8,23,.04); --shadow-lg:0 10px 28px rgba(2,8,23,.08); --overlay:rgba(2,8,23,.5);
          --table-stripe:#fafafa; --good-bg:#ecfdf5; --good-br:#a7f3d0; --good-t:#065f46;
          --warn-bg:#fffbeb; --warn-br:#fde68a; --warn-t:#92400e;
          --bad-bg:#fef2f2; --bad-br:#fecaca; --bad-t:#991b1b;
        }
        [data-theme="dark"]{
          --bg:#0b1220; --card:#0f172a; --text:#e5efff; --muted:#94a3b8; --line:#1e293b; --pill:#0b2a57; --chip-blue:#93c5fd;
          --shadow:0 4px 16px rgba(0,0,0,.3); --shadow-lg:0 10px 28px rgba(0,0,0,.45); --overlay:rgba(0,0,0,.6);
          --table-stripe:#0b1627;
        }
        *{box-sizing:border-box}
        html,body{margin:0;height:100%}
        body{font-family:'Inter',system-ui,-apple-system,Segoe UI,Roboto,Arial,sans-serif;background:var(--bg);color:var(--text)}
        a{text-decoration:none;color:inherit}
        .container{max-width:1100px;margin:0 auto;padding:24px}
        /* Header */
        .header{position:sticky;top:0;z-index:10;backdrop-filter:saturate(1.3) blur(6px);background:rgba(255,255,255,.85);border-bottom:1px solid var(--line)}
        [data-theme="dark"] .header{background:rgba(15,23,42,.8)}
        .header-inner{max-width:1100px;margin:0 auto;display:flex;align-items:center;gap:16px;padding:12px 24px}
        .logo{font-weight:700}
        .nav{margin-left:auto;display:flex;gap:10px}
        .nav button{font-size:14px;color:var(--muted);border:none;background:transparent;padding:8px 10px;border-radius:10px;cursor:pointer}
        .nav button.active{color:var(--text);background:rgba(37,99,235,.08)}
        /* Hero */
        .hero{display:flex;align-items:center;justify-content:space-between;gap:20px;margin:24px 0}
        .hero h1{margin:0 0 6px 0;font-size:28px}
        .hero p{margin:0;color:var(--muted)}
        /* Grid */
        .grid{display:grid;gap:16px;grid-template-columns:repeat(12,1fr)}
        .col-6{grid-column:span 6}.col-4{grid-column:span 4}
        @media (max-width:900px){.col-6,.col-4{grid-column:span 12}.hero{flex-direction:column;align-items:flex-start}}
        /* Card vacancy */
        .card{background:var(--card);border:1px solid var(--line);border-radius:16px;box-shadow:var(--shadow);padding:18px;transition:box-shadow .2s, transform .15s}
        .card:hover{box-shadow:var(--shadow-lg);transform:translateY(-1px)}
        .title{font-weight:600;margin:0 0 6px 0}
        .meta{display:flex;flex-wrap:wrap;gap:8px;margin:10px 0}
        .pill{background:var(--pill); color:var(--chip-blue); border:1px solid #dbeafe; padding:6px 10px; border-radius:999px; font-size:12px}
        [data-theme="dark"] .pill{border-color:#1e3a8a}
        .row{display:grid;grid-template-columns:1fr 1fr;gap:8px 16px;color:var(--muted);font-size:14px}
        .actions{display:flex;gap:10px;margin-top:14px;flex-wrap:wrap}
        .btn{border:none;cursor:pointer;border-radius:12px;padding:10px 14px;font-weight:600;font-size:14px;transition:filter .15s, background .2s, border-color .2s}
        .btn-primary{background:var(--brand); color:#fff}.btn-primary:hover{background:#1e4ed8}
        .btn-outline{background:transparent;border:1px solid var(--brand); color:var(--brand)}.btn-outline:hover{background:rgba(37,99,235,.08)}
        /* Footer */
        .foot{margin:40px 0 20px;color:var(--muted);font-size:13px;text-align:center}
        /* Employer */
        .toolbar{display:flex;gap:8px;flex-wrap:wrap;margin-bottom:12px}
        .table{width:100%;border-collapse:collapse;border:1px solid var(--line);border-radius:12px;overflow:hidden}
        .table th,.table td{padding:10px 12px;border-bottom:1px solid var(--line);text-align:left;font-size:14px}
        .table th{background:#f8fafc;color:var(--muted);font-weight:600}
        [data-theme="dark"] .table th{background:#0b1424}
        .table tr:nth-child(even){background:var(--table-stripe)}
        .badge{padding:4px 8px;border-radius:999px;font-weight:600;font-size:12px;color:#fff}
        .b-good{background:#10b981}.b-warn{background:#f59e0b}.b-bad{background:#ef4444}
      `}</style>
    </>
  );
}
